Vector=initial->[
    inner=initial
    count=0
    push=(self, value)->{
        self.inner[self.count]=value
        self.count+=1
    }
    pop=self->{
        self.count-=1
        to_return=self.inner[self.count]
        self.inner[self.count]=null
        to_return
    }
    last=self->self.inner[self.count-1]
    stringify=self->{
        result="Vector("
        first=1
        self.inner `#` i->{
            if(first){
                first=0
            } else {
                result+=", "
            }
            result+=string(i)
        }
        result+=")"
        result
    }
    compact=self->{
        new_inner=[]
        new_count=0
        self.inner `#` i->{
            if(i){
                new_inner[new_count]=i
                new_count+=1
            }
        }
        self.inner=new_inner
        self.count=new_count
    }
    remove=(self, index)->{
        self.inner[index]=null
        if(index<self.count){
            self::compact()
        }
    }
    set=(self, key, value)->{
        if(typeof(key)=='int){
            self.inner[key]=value
            if((value!=null) && (key`>=`self.count)){
                self.count=key+1
            } elif((value==null) && (key<self.count)){
                self::compact()
            }
        } else {
            native_set(self, key, value)
        }
    }
    get=(self, key)->{
        if(typeof(key)=='int){
            self.inner[key]
        } else {
            native_get(self, key)
        }
    }
]
test=->{
    v=Vector([])
    v::push(1)
    v::push(2)
    v::push(3)
    v::push(4)
    v::push(5)
    v::push(6)
    v[0]=null
    v::remove(1)
    v::pop()
    v
}
Vector