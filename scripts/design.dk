o=[1, 2, 3]

# metatable - not really
o.set_metatable(
    o.get_metatable + [
        "+" = (self, b)->map(self, (e)->e+b)
        "set" = -> Error("Read-only table.")
    ]
)

# magic indexes
o["+"] = (self, b)->map(self, (e)->e+b)
o["set"] = -> Error("Read-only table.")

# wrapping base types
degree = (num)->{
    d=wrap(num)
    d["+"] = (self, b) -> {
        result=self.value+b
        if(result>360){
            result-360
        } else {
            result
        }
    }
    d
}

# magic functions
yield(0)
coroutine(f)

arr=[1, 2, 3, name="John"]

f=(a, b)->{
    c=a-b
    (a+b)/c
}

# return

fib=n->{
    if(n==0) 0.
    elif(n==1) 1.
    fib(n-1)+fib(n-2)
}
fib=n->{
    if(n==0) 0 end
    elif(n==1) 1 end
    fib(n-1)+fib(n-2)
}
fib=n->{
    if(n==0) 0 return
    elif(n==1) 1 return
    fib(n-1)+fib(n-2)
}
fib=n->{
    if(n==0) 0!
    elif(n==1) 1!
    fib(n-1)+fib(n-2)
}
fib=n->{
    if(n==0) 0 |
    elif(n==1) 1 |
    fib(n-1)+fib(n-2)
}

fib=n->{
    if(n==0) 0 <-
    elif(n==1) 1 <-
    fib(n-1)+fib(n-2)
}

call=(self, arguments){
    if(typeof(self)==function){
        self(arguments)
    } elif(table.call!=null){
        table.call(arguments)
    } else {
        error("Can' index object "+self)
    }
}

get_override=(self, key)->{
    if(key=="full_name"){
        self.name+self.surname
    } else {
        get_native(self, key)
    }
}

call_override(self, arguments)-{
    self.call_count++
    native_call(self.contained_function, arguments)
}

table.get=(table, key)->{
    if(table.get!=null){
        table.get(table, key)
    } else {
        get_native(table, key)
    }
}

OperatorError: Can't add objects of type <number> and <table>
at:  (tests.duck:10:5)
src: (object.c:100:11)
caused by:
5
IndexingError: Indexed object doesn't have key "count"
at:  (tests.duck:10:3)
src: (object.c:10:15)
caused by:
[1, 2, 3]

trace()
Traceback:
tests.duck:20: test_tracing()
tests.duck:25: init_tests()

proccess=x...->sum(x)

map((e)->if e.age>18 {print(a)} )
map((e)->if(e.age>18)print(a))

if debug {
    print(id+name)
} else {
    print(name)
}

if(debug) print(id+name) endif
else print(name)

options=[ast=1, ast_optimisations=0]
#[ast=1, ast_optimisations=0]
#recursion_depth 100
#recursion_depth=100