iterator_processor=(processor_function, iterated)->[
    iterator=self->[
        it=iterator(iterated)
        next=iterator_self->processor_function(iterator_self.it::next())
    ]
]
[
range_iterator=(start, end, step)->[
    iterator=self->{
        [i=start, call=self->{
            fin=self.i>end
            result=[key=self.i, value=self.i, finished=fin]
            self.i+=step
            result
        }]
    }
]
repeat=(times ,f)->{
    f()
    if(times>1){
        repeat(times-1, f)
    }
}
while=f->if(f()) while(f) else null
keys_to_numbers=iterator_processor><[
    index=0
    call=(self, iterator_result)->{
        iterator_result.key=self.index
        self.index+=1
        iterator_result
    }
]
keys=iterator_processor><[
    index=0
    call=(self, iterator_result)->{
        iterator_result.value=iterator_result.key
        iterator_result.key=self.index
        self.index+=1
        iterator_result
    }
]
values=iterator_processor><[
    index=0
    call=(self, iterator_result)->{
        iterator_result.value=iterator_result.key
        iterator_result.key=self.index
        self.index+=1
        iterator_result
    }
]
filter=(iterated, predicate)->[
    iterator=self->[
        it=iterator(iterated)
        next=iterator_self->{
            current=iterator_self.it::next()
            if(predicate(current) || current.finished){
                current
            } else {
                iterator_self::next()
            }
        }
    ]
]
iterable_to_table=iterable->{
    result=[]
    iterable `##` (k, v)->{
        result[k]=v
    }
    result
}
iterable_to_array=iterable->{
    index=0
    result=[]
    iterable `#` v->{
        result[index]=v
        index+=1
    }
    result
}
]